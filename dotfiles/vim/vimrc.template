" {{{ Plugin Settings
  " {{{ NeoBundle Config
    if has('vim_starting')
        set nocompatible " Be iMproved

        let neobundle_readme=expand('~/.vim/bundle/neobundle.vim/README.md')
        if !filereadable(neobundle_readme)
            echo "Installing neobundle.vim."
            echo ""
            silent !mkdir -p ~/.vim/bundle
            silent !git clone https://github.com/Shougo/neobundle.vim ~/.vim/bundle/neobundle.vim
        endif

        set runtimepath+=~/.vim/bundle/neobundle.vim/
    endif

    call neobundle#rc(expand('~/.vim/bundle/'))

    NeoBundleFetch 'Shougo/neobundle.vim' " Let NeoBundle manage NeoBundle

    " Dependencies
    NeoBundle 'Shougo/vimproc', {
    \ 'build' : {
    \     'windows' : 'make -f make_mingw32.mak',
    \     'cygwin' : 'make -f make_cygwin.mak',
    \     'mac' : 'make -f make_mac.mak',
    \     'unix' : 'make -f make_unix.mak',
    \    },
    \ }
    NeoBundle 'vim-scripts/utl.vim' " Universal Text Linking - Execute URLs, footnotes, open emails, organize ideas
    NeoBundle 'mattn/calendar-vim' " Creates a calendar window for entering dates
    NeoBundle 'tpope/vim-speeddating' " use CTRL-A/CTRL-X to increment dates, times, and more
    NeoBundle 'Shougo/unite.vim' " Complicated buffer creation from any source

    " Interface
    NeoBundle 'bling/vim-airline' " Fancy Statusbar
    NeoBundle 'majutsushi/tagbar' " Displays tags in a window, ordered by class etc.
    NeoBundle 'jeffkreeftmeijer/vim-numbertoggle' " Toggles between relative and absolute line numbers automatically
    NeoBundle 'spolu/dwm.vim' " Tiling window management
    NeoBundle 'chriskempson/base16-vim' " Colour Schemes
    NeoBundle 'ntpeters/vim-better-whitespace' " Highlights trailing whitespace and adds a :StripWhitespace function to clean it

    " Notetaking
    NeoBundle 'fmoralesc/vim-pad' " Notational Velocity functionality in Vim
    NeoBundle 'jceb/vim-orgmode' " Orgmode implementation in Vim
    NeoBundle 'vimwiki/vimwiki' " Wiki implementation in Vim

    " Debugging
    NeoBundle 'scrooloose/syntastic' " Syntax checking

    " Code Completion
    NeoBundle 'Shougo/neocomplete' " Code completion and auto completion
    NeoBundle 'Shougo/neosnippet' " Plug-in for inserting snippets (integrates with neocomplete)
    NeoBundle 'Shougo/neosnippet-snippets' " Default repository for neosnippet snippets (need to fork own copy one day)

    " Shell
    NeoBundle 'Shougo/vimshell.vim' " Shell inside vim

    " Haskell
    NeoBundle 'Twinside/vim-haskellConceal' " Replaces haskell syntax with unicode markers
    NeoBundle 'travitch/hasksyn' " Improved syntax highlighting for haskell

    " Latex
    NeoBundle 'git://git.code.sf.net/p/atp-vim/code',
      \ {'name' : 'atp-vim'} " LaTeX plugin suite

    " Git
    NeoBundle 'tpope/vim-fugitive' " Git wrapper for vim

    " Markdown
    NeoBundle 'tpope/vim-markdown' " Syntax highlighting for markdown
    NeoBundle 'jtratner/vim-flavored-markdown' " Addon to vim-markdown that adds support for git flavoured markdown
  " }}}

  " {{{ Vim-pad Settings
    let g:pad_dir = "{{vim_pad_directory}}" " Sets the path where notes are saved
    let g:pad_open_in_split = 0 " When notes are opened they will open in the main window
    let g:pad_default_format = "org"
    let g:pad_window_height = 10
  " }}}

  " {{{ Neocomplete Settings
    " Disable AutoComplPop.
    let g:acp_enableAtStartup = 0
    " Use neocomplete.
    let g:neocomplete#enable_at_startup = 1
    " Use smartcase.
    let g:neocomplete#enable_smart_case = 1
    " Set minimum syntax keyword length.
    let g:neocomplete#sources#syntax#min_keyword_length = 3
    let g:neocomplete#lock_buffer_name_pattern = '\*ku\*'

    " Define dictionary.
    let g:neocomplete#sources#dictionary#dictionaries = {
        \ 'default' : '',
        \ 'vimshell' : $HOME.'/.vimshell_hist',
        \ 'scheme' : $HOME.'/.gosh_completions'
            \ }

    " Define keyword.
    if !exists('g:neocomplete#keyword_patterns')
        let g:neocomplete#keyword_patterns = {}
    endif
    let g:neocomplete#keyword_patterns['default'] = '\h\w*'

    " Plugin key-mappings.
    inoremap <expr><C-g>     neocomplete#undo_completion()
    inoremap <expr><C-l>     neocomplete#complete_common_string()

    " Recommended key-mappings.
    " <CR>: close popup and save indent.
    inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
    function! s:my_cr_function()
      return neocomplete#close_popup() . "\<CR>"
      " For no inserting <CR> key.
      "return pumvisible() ? neocomplete#close_popup() : "\<CR>"
    endfunction
    " <TAB>: completion.
    inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
    " <C-h>, <BS>: close popup and delete backword char.
    inoremap <expr><C-h> neocomplete#smart_close_popup()."\<C-h>"
    inoremap <expr><BS> neocomplete#smart_close_popup()."\<C-h>"
    inoremap <expr><C-y>  neocomplete#close_popup()
    inoremap <expr><C-e>  neocomplete#cancel_popup()

    " Enable omni completion.
    autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
    autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
    autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
    autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
    autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags

    " Enable heavy omni completion.
    if !exists('g:neocomplete#sources#omni#input_patterns')
      let g:neocomplete#sources#omni#input_patterns = {}
    endif
  " }}}

  " {{{ Airline Settings
    let g:airline#extensions#tabline#enabled = 1 " Automatically displays all buffers when only one tab open.
    let g:airline_left_sep=''
    let g:airline_right_sep=''
  " }}}

  " {{{ Vim Orgmode Settings
    let g:org_heading_highlight_colors = ['Character', 'Boolean', 'Label', 'String', 'Special', 'Include', 'Structure', 'Delimiter'] " This is configured for base16 might need to be changed for a different colour scheme
    let g:org_heading_highlight_levels = 100
  " }}}

  " {{{ Tagbar Settings
    let g:tagbar_show_visibility = 0 " show visibility symbols (public/protected/private)
    let g:tagbar_show_linenumbers = -1 " use globar line numbers settings to display line numbers in tagbar window
    let g:tagbar_iconchars = ['▸', '▾'] " Sets icons to use for folding
    noremap <silent> <F9> :TagbarToggle<CR>
  " }}}

" {{{ Vim-Flavored-Markdown Settings
  augroup markdown
      au!
      au BufNewFile,BufRead *.md,*.markdown setlocal filetype=ghmarkdown
  augroup END
" }}}

  " Automatic Latex Plugin Settings {{{
    let b:atp_Viewer = "zathura"
  " }}}
" }}}

" Display Settings {{{
  set nu " Turn line numbers on
  set scrolloff=4 " 4 lines above/below cursor when scrolling
  set showmatch " show matching bracket (briefly jump)
  set laststatus=2 " the statusline is now always shown (for airline)
  set guifont=DejaVu\ Sans\ Mono\ 9 " Sets font and size
  set guicursor+=a:blinkon0 " Cursor doesn't blink
  set guioptions-=T " Removes the toolbar
  set guioptions-=l " Disables Left-hand scrollbar being always present
  set guioptions-=L " Disables Left-hand scrollbar being present when there is a vertically split window
  set guioptions-=r " Disables Right-hand scrollbar always being present
  set guioptions-=R " Disables Right-Hand scrollbar beign present when there is a vertically split window
  set guioptions-=m " Removes the menubar
  set guioptions-=M " Stops menu.vim being sourced (call before setting syntax and filetype recognition)

  " {{{ Colour Scheme
    set background=dark
    let base16colorspace=256  " Access colours present in 256 colorspace
    colorscheme base16-default
  " }}}

" }}}

" {{{ Editor Settings
  set ignorecase " case insensitive searching
  set smartcase " but become case sensitive if you type uppercase characters
  set autoread " auto read when a file is changed from the outside
  set encoding=utf8 " Sets vim buffer to UTF-8 encoding
  set fileencoding=utf8 " Makes sure files are saved as UTF-8
  set spell spelllang=en_au

" {{{ Wrapping
  set linebreak
  " set showbreak=¿\
  " toggle wrapping
  nmap <silent> <F12> :let &wrap = !&wrap<CR>
" }}}

" {{{ Fold Settings
  set foldmethod=marker
  set foldcolumn=1 " Width of fold indicator column
  set foldlevel=1 " Every fold below this value will be closed by default
" }}}

" {{{ Tab Settings
  set expandtab " turn a tab into spaces
  set tabstop=2 " number of spaces a tab counts for
" }}}

" {{{ Indent Settings
  set shiftwidth=2 " spaces for autoindents
" }}}

" {{{ Clipboard Settings
  if has('unnamedplus')
    " By default, Vim will not use the system clipboard when yanking/pasting to
    " the default register. This option makes Vim use the system default
    " clipboard.
    " Note that on X11, there are _two_ system clipboards: the "standard" one, and
    " the selection/mouse-middle-click one. Vim sees the standard one as register
    " '+' (and this option makes Vim use it by default) and the selection one as
    " '*'.
    " See :h 'clipboard' for details.
      set clipboard=unnamedplus,unnamed
  else
    " Vim now also uses the selection system clipboard for default yank/paste.
      set clipboard+=unnamed
  endif
" }}}
" }}}

syntax on
filetype plugin indent on " Enable detection, plugins and indenting
NeoBundleCheck " Installation check
